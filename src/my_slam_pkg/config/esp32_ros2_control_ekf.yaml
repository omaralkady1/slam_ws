# ESP32 ros2_control Configuration for EKF Integration
# This configuration ensures the diff_drive_controller publishes
# high-quality odometry for EKF sensor fusion

controller_manager:
  ros__parameters:
    update_rate: 100  # High frequency for smooth EKF fusion
    use_sim_time: false

    # Controller list
    diff_drive_controller:
      type: diff_drive_controller/DiffDriveController
    
    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

# ESP32 Hardware Interface Configuration
esp32_motor_controller:
  ros__parameters:
    # Hardware interface plugin
    plugin: my_slam_pkg/ESP32HardwareInterface
    
    # CRITICAL: Physical robot parameters - MUST MATCH ESP32 FIRMWARE
    wheel_radius: 0.05      # meters - from ESP32 firmware
    wheel_separation: 0.34  # meters - from ESP32 firmware
    
    # Communication topics  
    cmd_vel_topic: /cmd_vel
    joint_states_topic: /joint_states  # From ESP32 encoders
    imu_topic: /imu/data              # From ESP32 IMU
    
    # Joint configuration - MUST match URDF exactly
    joints:
      - front_left_wheel_joint
      - front_right_wheel_joint
      - rear_left_wheel_joint
      - rear_right_wheel_joint
    
    # Hardware simulation flag
    use_sim_hardware: false
    
    # EKF integration settings
    publish_rate: 100.0              # Match controller manager frequency
    enable_imu_publishing: true      # Publish IMU data for EKF
    encoder_resolution: 11           # ESP32 encoder PPR
    gear_ratio: 1.0                  # ESP32 gear ratio

# OPTIMIZED Differential Drive Controller for EKF
diff_drive_controller:
  ros__parameters:
    # Wheel assignments - 4-wheel differential drive
    left_wheel_names: ["front_left_wheel_joint", "rear_left_wheel_joint"]
    right_wheel_names: ["front_right_wheel_joint", "rear_right_wheel_joint"]
    
    # CRITICAL: Physical parameters - MUST MATCH ESP32 FIRMWARE
    wheel_separation: 0.34  # meters - MEASURE THIS PRECISELY
    wheel_radius: 0.05      # meters - CALIBRATE THIS VALUE
    
    # Calibration multipliers (tune after EKF integration)
    wheel_separation_multiplier: 1.0   # Fine-tune based on EKF performance
    left_wheel_radius_multiplier: 1.0  # Fine-tune based on EKF performance  
    right_wheel_radius_multiplier: 1.0 # Fine-tune based on EKF performance
    
    # HIGH FREQUENCY publishing for EKF
    publish_rate: 100.0              # 100Hz for smooth EKF fusion
    
    # Frame configuration - CRITICAL for EKF
    odom_frame_id: "odom"           # Frame that EKF will override
    base_frame_id: "base_footprint" # Must match EKF base_link_frame
    
    # IMPORTANT: Disable TF publishing - EKF will handle odom->base_footprint
    enable_odom_tf: false  # EKF publishes this transform instead
    
    # Topic configuration
    cmd_vel_topic: "cmd_vel"
    use_stamped_vel: false
    
    # Odometry publishing - CRITICAL for EKF
    publish_odom: true               # Must publish for EKF input
    odom_topic: "odom"              # Topic that EKF reads (odom0)
    
    # OPTIMIZED: Velocity limits for smooth movement
    linear:
      x:
        has_velocity_limits: true
        max_velocity: 0.5         # Match ESP32 firmware limits
        min_velocity: -0.5        # Match ESP32 firmware limits
        has_acceleration_limits: true
        max_acceleration: 0.8     # Smooth acceleration for EKF
        min_acceleration: -0.8    # Smooth deceleration for EKF
    angular:
      z:
        has_velocity_limits: true
        max_velocity: 1.0         # Match ESP32 firmware limits
        min_velocity: -1.0        # Match ESP32 firmware limits
        has_acceleration_limits: true
        max_acceleration: 1.0     # Smooth angular acceleration for EKF
        min_acceleration: -1.0    # Smooth angular deceleration for EKF
    
    # LOW COVARIANCE: High-quality encoder odometry for EKF
    # These values indicate our confidence in wheel odometry
    pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.01]
    
    # Control mode - use encoder feedback
    open_loop: false
    
    # Wheel slip modeling for EKF accuracy
    wheel_slippage_factor: 0.02     # Minimal slip assumption for indoor use
    
    # Preserve turning radius during speed limiting
    preserve_turning_radius: true
    
    # Command timeout for safety
    cmd_vel_timeout: 0.5
    
    # Use velocity and position feedback for accurate odometry
    position_feedback: true
    velocity_feedback: true